<?php
/**
 * OpeningHours
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spy\Package\SpyClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Global Service Point Locator API
 *
 * Web service for getting DHL Service Points
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\Package\SpyClient\Model;

use \ArrayAccess;
use \Spy\Package\SpyClient\ObjectSerializer;

/**
 * OpeningHours Class Doc Comment
 *
 * @category Class
 * @package  Spy\Package\SpyClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OpeningHours implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OpeningHours';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'opening_hours' => 'object[]',
        'html' => 'string',
        'holiday_opening_hours_html' => 'string',
        'holidays' => '\Spy\Package\SpyClient\Model\Holidays'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'opening_hours' => null,
        'html' => null,
        'holiday_opening_hours_html' => null,
        'holidays' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'opening_hours' => 'openingHours',
        'html' => 'html',
        'holiday_opening_hours_html' => 'holidayOpeningHoursHtml',
        'holidays' => 'holidays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'opening_hours' => 'setOpeningHours',
        'html' => 'setHtml',
        'holiday_opening_hours_html' => 'setHolidayOpeningHoursHtml',
        'holidays' => 'setHolidays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'opening_hours' => 'getOpeningHours',
        'html' => 'getHtml',
        'holiday_opening_hours_html' => 'getHolidayOpeningHoursHtml',
        'holidays' => 'getHolidays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['opening_hours'] = isset($data['opening_hours']) ? $data['opening_hours'] : null;
        $this->container['html'] = isset($data['html']) ? $data['html'] : null;
        $this->container['holiday_opening_hours_html'] = isset($data['holiday_opening_hours_html']) ? $data['holiday_opening_hours_html'] : null;
        $this->container['holidays'] = isset($data['holidays']) ? $data['holidays'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets opening_hours
     *
     * @return object[]|null
     */
    public function getOpeningHours()
    {
        return $this->container['opening_hours'];
    }

    /**
     * Sets opening_hours
     *
     * @param object[]|null $opening_hours opening_hours
     *
     * @return $this
     */
    public function setOpeningHours($opening_hours)
    {
        $this->container['opening_hours'] = $opening_hours;

        return $this;
    }

    /**
     * Gets html
     *
     * @return string|null
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param string|null $html html
     *
     * @return $this
     */
    public function setHtml($html)
    {
        $this->container['html'] = $html;

        return $this;
    }

    /**
     * Gets holiday_opening_hours_html
     *
     * @return string|null
     */
    public function getHolidayOpeningHoursHtml()
    {
        return $this->container['holiday_opening_hours_html'];
    }

    /**
     * Sets holiday_opening_hours_html
     *
     * @param string|null $holiday_opening_hours_html holiday_opening_hours_html
     *
     * @return $this
     */
    public function setHolidayOpeningHoursHtml($holiday_opening_hours_html)
    {
        $this->container['holiday_opening_hours_html'] = $holiday_opening_hours_html;

        return $this;
    }

    /**
     * Gets holidays
     *
     * @return \Spy\Package\SpyClient\Model\Holidays|null
     */
    public function getHolidays()
    {
        return $this->container['holidays'];
    }

    /**
     * Sets holidays
     *
     * @param \Spy\Package\SpyClient\Model\Holidays|null $holidays holidays
     *
     * @return $this
     */
    public function setHolidays($holidays)
    {
        $this->container['holidays'] = $holidays;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


