<?php
/**
 * Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spy\Package\SpyClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Global Service Point Locator API
 *
 * Web service for getting DHL Service Points
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\Package\SpyClient\Model;

use \ArrayAccess;
use \Spy\Package\SpyClient\ObjectSerializer;

/**
 * Response Class Doc Comment
 *
 * @category Class
 * @package  Spy\Package\SpyClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Response implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => '\Spy\Package\SpyClient\Model\Status',
        'search_address' => 'string',
        'search_location' => '\Spy\Package\SpyClient\Model\SearchLocation',
        'map_culture' => 'string',
        'map_language' => 'string',
        'service_points' => 'object[]',
        'translations' => '\Spy\Package\SpyClient\Model\Translations',
        'lite_mode' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'status' => null,
        'search_address' => null,
        'search_location' => null,
        'map_culture' => null,
        'map_language' => null,
        'service_points' => null,
        'translations' => null,
        'lite_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'search_address' => 'searchAddress',
        'search_location' => 'searchLocation',
        'map_culture' => 'mapCulture',
        'map_language' => 'mapLanguage',
        'service_points' => 'servicePoints',
        'translations' => 'translations',
        'lite_mode' => 'liteMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'search_address' => 'setSearchAddress',
        'search_location' => 'setSearchLocation',
        'map_culture' => 'setMapCulture',
        'map_language' => 'setMapLanguage',
        'service_points' => 'setServicePoints',
        'translations' => 'setTranslations',
        'lite_mode' => 'setLiteMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'search_address' => 'getSearchAddress',
        'search_location' => 'getSearchLocation',
        'map_culture' => 'getMapCulture',
        'map_language' => 'getMapLanguage',
        'service_points' => 'getServicePoints',
        'translations' => 'getTranslations',
        'lite_mode' => 'getLiteMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['search_address'] = isset($data['search_address']) ? $data['search_address'] : null;
        $this->container['search_location'] = isset($data['search_location']) ? $data['search_location'] : null;
        $this->container['map_culture'] = isset($data['map_culture']) ? $data['map_culture'] : null;
        $this->container['map_language'] = isset($data['map_language']) ? $data['map_language'] : null;
        $this->container['service_points'] = isset($data['service_points']) ? $data['service_points'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
        $this->container['lite_mode'] = isset($data['lite_mode']) ? $data['lite_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return \Spy\Package\SpyClient\Model\Status
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Spy\Package\SpyClient\Model\Status $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets search_address
     *
     * @return string|null
     */
    public function getSearchAddress()
    {
        return $this->container['search_address'];
    }

    /**
     * Sets search_address
     *
     * @param string|null $search_address search_address
     *
     * @return $this
     */
    public function setSearchAddress($search_address)
    {
        $this->container['search_address'] = $search_address;

        return $this;
    }

    /**
     * Gets search_location
     *
     * @return \Spy\Package\SpyClient\Model\SearchLocation|null
     */
    public function getSearchLocation()
    {
        return $this->container['search_location'];
    }

    /**
     * Sets search_location
     *
     * @param \Spy\Package\SpyClient\Model\SearchLocation|null $search_location search_location
     *
     * @return $this
     */
    public function setSearchLocation($search_location)
    {
        $this->container['search_location'] = $search_location;

        return $this;
    }

    /**
     * Gets map_culture
     *
     * @return string|null
     */
    public function getMapCulture()
    {
        return $this->container['map_culture'];
    }

    /**
     * Sets map_culture
     *
     * @param string|null $map_culture map_culture
     *
     * @return $this
     */
    public function setMapCulture($map_culture)
    {
        $this->container['map_culture'] = $map_culture;

        return $this;
    }

    /**
     * Gets map_language
     *
     * @return string|null
     */
    public function getMapLanguage()
    {
        return $this->container['map_language'];
    }

    /**
     * Sets map_language
     *
     * @param string|null $map_language map_language
     *
     * @return $this
     */
    public function setMapLanguage($map_language)
    {
        $this->container['map_language'] = $map_language;

        return $this;
    }

    /**
     * Gets service_points
     *
     * @return object[]|null
     */
    public function getServicePoints()
    {
        return $this->container['service_points'];
    }

    /**
     * Sets service_points
     *
     * @param object[]|null $service_points service_points
     *
     * @return $this
     */
    public function setServicePoints($service_points)
    {
        $this->container['service_points'] = $service_points;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return \Spy\Package\SpyClient\Model\Translations|null
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param \Spy\Package\SpyClient\Model\Translations|null $translations translations
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets lite_mode
     *
     * @return bool|null
     */
    public function getLiteMode()
    {
        return $this->container['lite_mode'];
    }

    /**
     * Sets lite_mode
     *
     * @param bool|null $lite_mode lite_mode
     *
     * @return $this
     */
    public function setLiteMode($lite_mode)
    {
        $this->container['lite_mode'] = $lite_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


