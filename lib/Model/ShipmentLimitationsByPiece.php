<?php
/**
 * ShipmentLimitationsByPiece
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DHL\GSPL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Global Service Point Locator API
 *
 * Web service for getting DHL Service Points
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DHL\GSPL\Model;

use \ArrayAccess;
use \DHL\GSPL\ObjectSerializer;

/**
 * ShipmentLimitationsByPiece Class Doc Comment
 *
 * @category Class
 * @package  DHL\GSPL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentLimitationsByPiece implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ShipmentLimitationsByPieceModelFields
      */
    public static function GetModelFields(): ShipmentLimitationsByPieceModelFields
    {
        return new ShipmentLimitationsByPieceModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ShipmentLimitationsByPieceModelAttributes
      */
    public static function GetModelAttributes(): ShipmentLimitationsByPieceModelAttributes
    {
        return new ShipmentLimitationsByPieceModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentLimitationsByPiece';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'piece_size_limit1' => '\DHL\GSPL\Model\MaxShipmentWeight',
        'piece_size_limit2' => '\DHL\GSPL\Model\MaxShipmentWeight',
        'piece_size_limit3' => '\DHL\GSPL\Model\MaxShipmentWeight',
        'max_piece_weight' => '\DHL\GSPL\Model\MaxShipmentWeight',
        'html' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'piece_size_limit1' => null,
        'piece_size_limit2' => null,
        'piece_size_limit3' => null,
        'max_piece_weight' => null,
        'html' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'piece_size_limit1' => false,
		'piece_size_limit2' => false,
		'piece_size_limit3' => false,
		'max_piece_weight' => false,
		'html' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'piece_size_limit1' => 'pieceSizeLimit1',
        'piece_size_limit2' => 'pieceSizeLimit2',
        'piece_size_limit3' => 'pieceSizeLimit3',
        'max_piece_weight' => 'maxPieceWeight',
        'html' => 'html'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'piece_size_limit1' => 'setPieceSizeLimit1',
        'piece_size_limit2' => 'setPieceSizeLimit2',
        'piece_size_limit3' => 'setPieceSizeLimit3',
        'max_piece_weight' => 'setMaxPieceWeight',
        'html' => 'setHtml'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'piece_size_limit1' => 'getPieceSizeLimit1',
        'piece_size_limit2' => 'getPieceSizeLimit2',
        'piece_size_limit3' => 'getPieceSizeLimit3',
        'max_piece_weight' => 'getMaxPieceWeight',
        'html' => 'getHtml'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('piece_size_limit1', $data ?? [], null);
        $this->setIfExists('piece_size_limit2', $data ?? [], null);
        $this->setIfExists('piece_size_limit3', $data ?? [], null);
        $this->setIfExists('max_piece_weight', $data ?? [], null);
        $this->setIfExists('html', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets piece_size_limit1
     *
     * @return \DHL\GSPL\Model\MaxShipmentWeight|null
     */
    public function getPieceSizeLimit1()
    {
        return $this->container['piece_size_limit1'];
    }

    /**
     * Sets piece_size_limit1
     *
     * @param \DHL\GSPL\Model\MaxShipmentWeight|null $piece_size_limit1 piece_size_limit1
     *
     * @return self
     */
    public function setPieceSizeLimit1($piece_size_limit1)
    {

        if (is_null($piece_size_limit1)) {
            throw new \InvalidArgumentException('non-nullable piece_size_limit1 cannot be null');
        }

        $this->container['piece_size_limit1'] = $piece_size_limit1;

        return $this;
    }

    /**
     * Gets piece_size_limit2
     *
     * @return \DHL\GSPL\Model\MaxShipmentWeight|null
     */
    public function getPieceSizeLimit2()
    {
        return $this->container['piece_size_limit2'];
    }

    /**
     * Sets piece_size_limit2
     *
     * @param \DHL\GSPL\Model\MaxShipmentWeight|null $piece_size_limit2 piece_size_limit2
     *
     * @return self
     */
    public function setPieceSizeLimit2($piece_size_limit2)
    {

        if (is_null($piece_size_limit2)) {
            throw new \InvalidArgumentException('non-nullable piece_size_limit2 cannot be null');
        }

        $this->container['piece_size_limit2'] = $piece_size_limit2;

        return $this;
    }

    /**
     * Gets piece_size_limit3
     *
     * @return \DHL\GSPL\Model\MaxShipmentWeight|null
     */
    public function getPieceSizeLimit3()
    {
        return $this->container['piece_size_limit3'];
    }

    /**
     * Sets piece_size_limit3
     *
     * @param \DHL\GSPL\Model\MaxShipmentWeight|null $piece_size_limit3 piece_size_limit3
     *
     * @return self
     */
    public function setPieceSizeLimit3($piece_size_limit3)
    {

        if (is_null($piece_size_limit3)) {
            throw new \InvalidArgumentException('non-nullable piece_size_limit3 cannot be null');
        }

        $this->container['piece_size_limit3'] = $piece_size_limit3;

        return $this;
    }

    /**
     * Gets max_piece_weight
     *
     * @return \DHL\GSPL\Model\MaxShipmentWeight|null
     */
    public function getMaxPieceWeight()
    {
        return $this->container['max_piece_weight'];
    }

    /**
     * Sets max_piece_weight
     *
     * @param \DHL\GSPL\Model\MaxShipmentWeight|null $max_piece_weight max_piece_weight
     *
     * @return self
     */
    public function setMaxPieceWeight($max_piece_weight)
    {

        if (is_null($max_piece_weight)) {
            throw new \InvalidArgumentException('non-nullable max_piece_weight cannot be null');
        }

        $this->container['max_piece_weight'] = $max_piece_weight;

        return $this;
    }

    /**
     * Gets html
     *
     * @return string|null
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param string|null $html html
     *
     * @return self
     */
    public function setHtml($html)
    {

        if (is_null($html)) {
            throw new \InvalidArgumentException('non-nullable html cannot be null');
        }

        $this->container['html'] = $html;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


